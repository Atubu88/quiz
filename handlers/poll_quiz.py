import asyncio
import time
import os
import random
from aiogram import Router, F
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from supabase import create_client
from keyboards import start_keyboard  # –ò–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_API_KEY = os.getenv("SUPABASE_API_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_API_KEY)

# –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
poll_quiz_router = Router()

# –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ FSM)
sessions = {}

def load_questions():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã poll_quiz_questions.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
      - id
      - question (—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞)
      - options (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)
      - correct_answer (–∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
      - explanation (–ø–æ—è—Å–Ω–µ–Ω–∏–µ)
      - theme (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    response = supabase.table("poll_quiz_questions").select("*").execute()
    if response.data:
        return response.data
    return []

def poll_quiz_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

restart_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

def build_keyboard(user_id: int, question_index: int) -> InlineKeyboardMarkup:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–µ—Å—Å–∏–∏
    current_q = sessions[user_id]["questions"][question_index]
    for i, option in enumerate(current_q["options"]):
        cb_data = f"quiz:{user_id}:{question_index}:{i}"
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=option, callback_data=cb_data)])
    return keyboard

@poll_quiz_router.message(F.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def restart_poll_game(message: Message):
    await start_poll_quiz(message)

@poll_quiz_router.message(F.text == "‚è≥ –í—ã–∂–∏–≤–∞–Ω–∏–µ")
async def poll_quiz_mode_entry(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ ¬´–≤—ã–∂–∏–≤–∞–Ω–∏–µ¬ª."""
    await message.answer(
        " <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º '–í—ã–∂–∏–≤–∞–Ω–∏–µ'!</b> üî•\n\n"
        "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>\n"
        "üü¢ –£ –≤–∞—Å <b>3</b> –∏–≥—Ä–æ–≤—ã—Ö –∂–∏–∑–Ω–∏ (‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è).\n"
        "‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 25 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –ß—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å, –æ—Ç–≤–µ—Ç—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ.\n"
        "‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è:\n"
        "   ‚Ä¢ –í–æ–ø—Ä–æ—Å—ã 1‚Äì10: 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π.\n"
        "   ‚Ä¢ –í–æ–ø—Ä–æ—Å—ã 11‚Äì20: 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π.\n"
        "   ‚Ä¢ –í–æ–ø—Ä–æ—Å—ã 21‚Äì25: 7 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π.\n"
        "‚ùå –ó–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–∞–µ—Ç, –≤—ã —Ç–µ—Ä—è–µ—Ç–µ 1 –∏–≥—Ä–æ–≤—É—é –∂–∏–∑–Ω—å.\n"
        "‚ö°Ô∏è –ß–µ–º –±—ã—Å—Ç—Ä–µ–µ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ, —Ç–µ–º –≤—ã—à–µ –æ–∫–∞–∂–µ—Ç–µ—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–π—Ç–∏–Ω–≥–∞!\n"
        "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å? –ù–∞–∂–º–∏—Ç–µ <b>'–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'</b>!",
        reply_markup=poll_quiz_menu_keyboard(),
        parse_mode="HTML"
    )

@poll_quiz_router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    user_id = message.from_user.id
    sessions.pop(user_id, None)
    await message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=start_keyboard())

@poll_quiz_router.message(F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
async def start_poll_quiz(message: Message):
    user_id = message.from_user.id
    if user_id in sessions and sessions[user_id]["active"]:
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã
    questions = load_questions()
    if not questions:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    random.shuffle(questions)
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ 25, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 25
    if len(questions) > 25:
        questions = questions[:25]

    sessions[user_id] = {
        "lives": 3,
        "question_index": 0,
        "score": 0,
        "active": True,
        "start_time": time.time(),
        "timer_task": None,
        "current_msg_id": None,
        "questions": questions  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º 25 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ—Å—Å–∏—é
    }

    await message.answer("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£ –≤–∞—Å 3 –∏–≥—Ä–æ–≤—ã—Ö –∂–∏–∑–Ω–∏ (‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è). –û—Ç–≤–µ—á–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å.")
    await send_question(message)

async def send_question(message: Message, user_id: int = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–¥–∏–º—ã–π —Ç–∞–π–º–µ—Ä.
    –ï—Å–ª–∏ user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ message.from_user.id.
    """
    if user_id is None:
        user_id = message.from_user.id
    session = sessions[user_id]

    if session["question_index"] >= len(session["questions"]):
        await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏!")
        return await finalize_game(message, user_id)

    current_level = session["question_index"] + 1
    current_q = session["questions"][session["question_index"]]
    # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —ç–º–æ–¥–∑–∏ —Å–µ—Ä–¥–µ—á–µ–∫ (–∏–≥—Ä–æ–≤–∞—è –∂–∏–∑–Ω—å)
    lives_display = "‚ù§Ô∏è" * session["lives"]

    keyboard = build_keyboard(user_id, session["question_index"])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É –≤–æ–ø—Ä–æ—Å–∞:
    # –ø–µ—Ä–≤—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äì 15 —Å–µ–∫—É–Ω–¥, —Å 11 –ø–æ 20 ‚Äì 10 —Å–µ–∫—É–Ω–¥, –¥–∞–ª–µ–µ ‚Äì 7 —Å–µ–∫—É–Ω–¥.
    if session["question_index"] < 10:
        timer_duration = 15
    elif session["question_index"] < 20:
        timer_duration = 10
    else:
        timer_duration = 7

    text = (f"üÜô –£—Ä–æ–≤–µ–Ω—å {current_level}:\n{current_q['question']}\n"
            f"‚ö° –ò–≥—Ä–æ–≤–∞—è –∂–∏–∑–Ω—å: {lives_display}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {timer_duration} —Å–µ–∫—É–Ω–¥")
    sent_msg = await message.answer(text, reply_markup=keyboard)
    session["current_msg_id"] = sent_msg.message_id

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–¥–∏–º—ã–π —Ç–∞–π–º–µ—Ä —Å –Ω—É–∂–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    loop = asyncio.get_running_loop()
    task = loop.create_task(countdown_timer(message, session["question_index"], user_id, timer_duration))
    session["timer_task"] = task

async def countdown_timer(message: Message, question_idx: int, user_id: int, total_time: int = 40):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –ø–æ–∫–∞–∑—ã–≤–∞—è –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è.
    –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–∞–µ—Ç, —Å–ø–∏—Å—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∂–∏–∑–Ω—å –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å.
    """
    for remaining in range(total_time, 0, -1):
        await asyncio.sleep(1)
        session = sessions.get(user_id)
        if not session or not session["active"] or session["question_index"] != question_idx:
            return  # –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        current_level = session["question_index"] + 1
        current_q = session["questions"][question_idx]
        lives_display = "‚ù§Ô∏è" * session["lives"]
        text = (f"üÜô –£—Ä–æ–≤–µ–Ω—å {current_level}:\n{current_q['question']}\n"
                f"‚ö° –ò–≥—Ä–æ–≤–∞—è –∂–∏–∑–Ω—å: {lives_display}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫—É–Ω–¥")
        keyboard = build_keyboard(user_id, question_idx)
        try:
            await message.bot.edit_message_text(
                text,
                chat_id=message.chat.id,
                message_id=session["current_msg_id"],
                reply_markup=keyboard
            )
        except Exception as e:
            if "message is not modified" in str(e):
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º
            else:
                print("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:", e)
    # –ï—Å–ª–∏ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (—Ç–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫)
    session = sessions.get(user_id)
    if not session or not session["active"] or session["question_index"] != question_idx:
        return
    session["lives"] -= 1
    try:
        await message.bot.edit_message_reply_markup(
            chat_id=message.chat.id,
            message_id=session["current_msg_id"],
            reply_markup=None
        )
    except Exception:
        pass
    await message.answer("‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –±—ã—Å—Ç—Ä–µ–µ.")
    if session["lives"] <= 0:
        await message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏–≥—Ä–æ–≤–∞—è –∂–∏–∑–Ω—å. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
        return await finalize_game(message, user_id)
    else:
        # –í–æ–ø—Ä–æ—Å –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–µ–º –∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        return await send_question(message, user_id)

@poll_quiz_router.callback_query(lambda c: c.data and c.data.startswith("quiz:"))
async def quiz_answer_callback(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å –æ—Ç–≤–µ—Ç–æ–º.
    –§–æ—Ä–º–∞—Ç callback_data: quiz:user_id:question_index:option_index
    """
    parts = callback.data.split(":")
    if len(parts) != 4:
        return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!", show_alert=True)
    _, user_id_str, q_idx_str, opt_idx_str = parts
    try:
        user_id = int(user_id_str)
        q_idx = int(q_idx_str)
        opt_idx = int(opt_idx_str)
    except ValueError:
        return await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)

    if callback.from_user.id != user_id:
        return await callback.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∏–≥—Ä—ã.", show_alert=True)

    session = sessions.get(user_id)
    if not session or not session["active"]:
        return await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

    if q_idx != session["question_index"]:
        return await callback.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω!", show_alert=True)

    if session["timer_task"]:
        session["timer_task"].cancel()
        session["timer_task"] = None

    try:
        await callback.message.edit_reply_markup(None)
    except Exception:
        pass

    current_q = session["questions"][q_idx]
    correct_option = current_q["correct_answer"]
    if opt_idx == correct_option:
        session["score"] += 1
        feedback = "‚úÖ –í–µ—Ä–Ω–æ!\n\n‚ÑπÔ∏è " + current_q["explanation"]
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π
        session["question_index"] += 1
    else:
        session["lives"] -= 1
        feedback = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!"  # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏—è

    await callback.message.answer(feedback)

    if session["lives"] <= 0:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏–≥—Ä–æ–≤–∞—è –∂–∏–∑–Ω—å. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
        return await finalize_game(callback.message, user_id)

    await send_question(callback.message, user_id)
    await callback.answer()

async def finalize_game(message: Message, user_id: int = None):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É: –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ Supabase –∏ –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é.
    """
    if user_id is None:
        user_id = message.from_user.id
    session = sessions.pop(user_id, None)
    if not session:
        return
    elapsed_time = time.time() - session["start_time"]
    minutes, seconds = divmod(int(elapsed_time), 60)
    first_name = message.from_user.first_name or ""
    username = message.from_user.username or ""
    display_name = first_name or username or "–ê–Ω–æ–Ω–∏–º"
    score = session["score"]
    time_spent = int(elapsed_time)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Supabase
    existing_record = supabase.table("poll_quiz_results") \
                              .select("id", "score", "time_spent") \
                              .eq("user_id", user_id).execute()
    if existing_record.data:
        supabase.table("poll_quiz_results").update({
            "score": score,
            "time_spent": time_spent
        }).eq("user_id", user_id).execute()
    else:
        supabase.table("poll_quiz_results").insert({
            "user_id": user_id,
            "username": display_name,
            "score": score,
            "time_spent": time_spent
        }).execute()

    # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score (—É–±—ã–≤–∞–Ω–∏–µ) –∏ –ø–æ time_spent (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ) —á–µ—Ä–µ–∑ desc=False
    result = supabase.table("poll_quiz_results") \
                     .select("user_id", "score") \
                     .order("score", desc=True) \
                     .order("time_spent", desc=False) \
                     .execute()
    all_results = result.data
    total_players = len(all_results)
    position = next((i + 1 for i, res in enumerate(all_results)
                     if res["user_id"] == user_id), "N/A")

    await message.answer(
        f"üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üìä\n"
        f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {score}\n"
        f"‚è± –í—Ä–µ–º—è –∏–≥—Ä—ã: {minutes} –º–∏–Ω {seconds} —Å–µ–∫.\n"
        f"üèÜ –¢—ã –∑–∞–Ω—è–ª *{position}-–µ –º–µ—Å—Ç–æ* –∏–∑ {total_players} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
        reply_markup=restart_keyboard,
        parse_mode="Markdown"
    )
