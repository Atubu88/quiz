import logging
import os
import asyncio
import time

from aiogram import Router, types, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from supabase import create_client
from dotenv import load_dotenv

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤–∞—à utils –∏ keyboards
from keyboards import quiz_list_keyboard  # –ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –µ—â—ë –Ω—É–∂–Ω–æ
from utils import build_leaderboard_message

load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_API_KEY = os.getenv("SUPABASE_API_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_API_KEY)

quiz_router = Router()
logger = logging.getLogger(__name__)


class QuizState(StatesGroup):
    waiting_for_quiz_selection = State()
    answering_questions = State()

class GPTDialog(StatesGroup):
    waiting_for_question_number = State()
    waiting_for_user_question = State()


from mistral import  safe_mistral_request  # –ø–æ–¥–∫–ª—é—á–∞–π —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ utils

@quiz_router.callback_query(F.data == "ask_gpt")
async def ask_gpt_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(GPTDialog.waiting_for_question_number)


@quiz_router.message(GPTDialog.waiting_for_question_number)
async def handle_question_number(message: types.Message, state: FSMContext):
    text = message.text.strip()

    # ‚õî –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ: –∫–æ–º–∞–Ω–¥—ã –∏ "–°–ø–∏—Å–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω"
    if text == "üìã –°–ø–∏—Å–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω" or text.startswith("/"):
        await message.answer("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–∏–∫—Ç–æ—Ä–∏–Ω.")
        await state.clear()
        await list_quizzes(message, state)
        return

    # üî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä
    if not text.isdigit():
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3)")
        return

    number = int(text)
    data = await state.get_data()
    quiz = data.get("quiz")

    if not quiz or number < 1 or number > len(quiz["questions"]):
        await message.answer("‚ùó –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return

    question_data = quiz["questions"][number - 1]
    question_text = question_data["text"]
    options = question_data["options"]
    explanation = question_data.get("explanation") or "–ù–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏—è."
    correct_option = next((opt["text"] for opt in options if opt["is_correct"]), "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # üß© –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    options_text = ""
    for i, opt in enumerate(options):
        bullet = "üîπ"
        options_text += f"{bullet} {opt['text']}\n"

    full_question_text = (
        f"–í–æ–ø—Ä–æ—Å ‚Ññ{number}:\n"
        f"{question_text}\n\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã:\n{options_text}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}\n"
        f"‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {explanation}"
    )

    # üíæ –û–±–Ω–æ–≤–ª—è–µ–º FSM
    await state.update_data(
        selected_question_text=full_question_text,
        gpt_question_count=0,
        chat_history=[
            {
                "role": "system",
                "content": (
                    "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. "
                    "–û—Ç–≤–µ—á–∞–π –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –æ–±—ä—è—Å–Ω—è–µ—à—å –¥—Ä—É–≥—É –∏–∑ 6 –∫–ª–∞—Å—Å–∞. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–∏–∫–∞–∫–æ–π –Ω–∞—É—á–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏. "
                    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —Ç–µ—Ä–º–∏–Ω—ã, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. "
                    "–û–±—ä—è—Å–Ω—è–π —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–Ω—è–ª –¥–∞–∂–µ —Ç–æ—Ç, –∫—Ç–æ —É—á–∏—Ç—Å—è –Ω–∞ —Ç—Ä–æ–π–∫–∏. "
                    "–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏. "
                    "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ. "
                    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî —Å–∫–∞–∂–∏: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.'"
                )
            },
            {
                "role": "user",
                "content": f"–í–æ–ø—Ä–æ—Å –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n{question_text}\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã:\n" + "\n".join(
                    f"- {opt['text']}" for opt in options)
            },
            {
                "role": "assistant",
                "content": f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}. ‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {explanation}"
            }
        ]

    )

    await message.answer(
        f"‚úÖ –í–æ–ø—Ä–æ—Å ‚Ññ{number} –≤—ã–±—Ä–∞–Ω!\n\n"
        f"*{question_text}*\n\n"
        f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ:",
        parse_mode="Markdown"
    )

    await state.set_state(GPTDialog.waiting_for_user_question)





@quiz_router.message(GPTDialog.waiting_for_user_question)
async def handle_user_gpt_question(message: types.Message, state: FSMContext):
    user_question = message.text.strip()

    # üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞
    if user_question in ["üìã –°–ø–∏—Å–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω"] or user_question.startswith("/"):
        await message.answer("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–∏–∫—Ç–æ—Ä–∏–Ω.")
        await state.clear()
        await list_quizzes(message, state)
        return

    data = await state.get_data()
    chat_history = data.get("chat_history", [])
    question_count = data.get("gpt_question_count", 0)

    if not chat_history:
        await message.answer("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    chat_history.append({"role": "user", "content": user_question})
    await message.answer("ü§ñ GPT –¥—É–º–∞–µ—Ç...")

    reply = await safe_mistral_request(chat_history)
    chat_history.append({"role": "assistant", "content": reply})

    question_count += 1
    await state.update_data(chat_history=chat_history, gpt_question_count=question_count)

    await message.answer(f"üí¨ GPT:\n\n{reply}")

    if question_count >= 5:
        await message.answer("‚úÖ –í—ã –∑–∞–¥–∞–ª–∏ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —ç—Ç–æ–º—É –ø—É–Ω–∫—Ç—É. –î–∏–∞–ª–æ–≥ —Å GPT –∑–∞–≤–µ—Ä—à—ë–Ω.")
        await state.clear()

    else:
        await message.answer("‚úçÔ∏è –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /stop, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å.")




async def get_db_user_id_by_telegram_id(telegram_id: int):
    """
    –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (db_user_id) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'users'
    –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É Telegram ID (telegram_id).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    try:
        response = await asyncio.to_thread(
            supabase.table("users")
            .select("id")
            .eq("telegram_id", telegram_id)
            .single()
            .execute
        )
        return response.data["id"] if response.data else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è db_user_id: {e}")
        return None


async def get_quiz_by_id(quiz_id: int):
    """–ü–æ–ª—É—á–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ ID —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    try:
        response = await asyncio.to_thread(
            supabase.table("quizzes")
            .select("id, title, is_active, questions(id, text, explanation, options(text, is_correct))")
            .eq("id", quiz_id)
            .single()
            .execute
        )
        return response.data if response.data else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
        return None


async def auto_finish_quiz(chat_id: int, state: FSMContext, bot: Bot):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç."""
    await asyncio.sleep(600)  # –∂–¥–µ–º 600 —Å–µ–∫—É–Ω–¥ (10 –º–∏–Ω—É—Ç)
    current_state = await state.get_state()
    if current_state == QuizState.answering_questions.state:
        await bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
        await finish_quiz(chat_id, state, bot)


# -------------------- –ù–û–í–´–ô –ö–û–õ–ë–≠–ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ --------------------
@quiz_router.callback_query(F.data.startswith("category_"))
async def show_quizzes_in_category(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    category_id_str = callback_query.data.split("_", maxsplit=1)[1]

    if not category_id_str.isdigit():
        await callback_query.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        return

    category_id = int(category_id_str)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_resp = await asyncio.to_thread(
            supabase.table("categories")
            .select("name")
            .eq("id", category_id)
            .single()
            .execute
        )
        category_name = category_resp.data["name"] if category_resp.data else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        quizzes_resp = await asyncio.to_thread(
            supabase.table("quizzes")
            .select("id, title, is_active")
            .eq("category_id", category_id)
            .eq("is_active", True)
            .execute
        )
        quizzes = quizzes_resp.data or []

        if not quizzes:
            await callback_query.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω.")
            return

        keyboard_buttons = [
            [InlineKeyboardButton(
                text=f"üìù {q['title']}",
                callback_data=f"quiz_{q['id']}"
            )]
            for q in quizzes
        ]
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="return_to_quizzes"
            )
        ])

        kb = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback_query.message.edit_text(
            f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: *{category_name}*",
            reply_markup=kb,
            parse_mode="Markdown"
        )
        await state.set_state(QuizState.waiting_for_quiz_selection)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω.")





@quiz_router.callback_query(F.data.startswith("quiz_"), StateFilter(QuizState.waiting_for_quiz_selection))
async def start_quiz(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        quiz_id = int(callback_query.data.split("_")[1])
        telegram_id = callback_query.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        quiz = await get_quiz_by_id(quiz_id)
        if not quiz:
            await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
        if not quiz["is_active"]:
            await callback_query.answer("üîí –≠—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        await callback_query.message.delete()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–±–æ—Ä–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        await callback_query.message.answer(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: *{quiz['title']}*.",
            parse_mode="Markdown"
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
        db_user_id = await get_db_user_id_by_telegram_id(telegram_id)
        if not db_user_id:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram ID={telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase.")
            await callback_query.message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /start –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
            return

        chat_id = callback_query.message.chat.id

        await state.update_data(
            quiz_id=quiz_id,
            chat_id=chat_id,
            telegram_id=telegram_id,
            db_user_id=db_user_id,
            current_question_index=0,
            correct_answers=0,
            start_time=time.time(),
            quiz_finished=False,
            quiz=quiz
        )
        await state.set_state(QuizState.answering_questions)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
        asyncio.create_task(auto_finish_quiz(chat_id, state, callback_query.bot))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await send_question(chat_id, state, callback_query.bot)

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_quiz: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()


@quiz_router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω")
@quiz_router.callback_query(F.data == "return_to_quizzes")
async def list_quizzes(event: types.Message | types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–∏–∫—Ç–æ—Ä–∏–Ω.
    """
    try:
        # 1. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ callback_query –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç–æ–º
        if isinstance(event, types.CallbackQuery):
            try:
                await event.message.delete()
            except TelegramAPIError as e:
                logger.warning(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await event.answer()

        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cat_resp = await asyncio.to_thread(
            supabase.table("categories")
            .select("id, name")
            .eq("is_active", True)
            .execute
        )
        categories = cat_resp.data or []

        if not categories:
            msg = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–∏–∫—Ç–æ—Ä–∏–Ω."
            if isinstance(event, types.CallbackQuery):
                await event.message.answer(msg)
            else:
                await event.answer(msg)
            return

        # 3. –ö–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard_buttons = [
            [InlineKeyboardButton(
                text=f"üìÇ {cat['name']}",
                callback_data=f"category_{cat['id']}"
            )]
            for cat in categories
        ]
        kb = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> –≤–∏–∫—Ç–æ—Ä–∏–Ω:"
        if isinstance(event, types.CallbackQuery):
            await event.message.answer(msg_text, reply_markup=kb, parse_mode="HTML")
        elif isinstance(event, types.Message):
            await event.bot.send_message(event.chat.id, msg_text, reply_markup=kb, parse_mode="HTML")

        # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(QuizState.waiting_for_quiz_selection)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ list_quizzes (–ø–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π): {e}")
        error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
        if isinstance(event, types.CallbackQuery):
            await event.message.answer(error_msg)
        else:
            await event.answer(error_msg)




async def send_question(chat_id: int, state: FSMContext, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º –∏ –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π."""
    try:
        data = await state.get_data()
        quiz = data.get("quiz")

        if not quiz or "questions" not in quiz:
            await bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return

        questions = quiz["questions"]
        current_index = data.get("current_question_index", 0)

        if current_index >= len(questions):
            await finish_quiz(chat_id, state, bot)
            return

        question = questions[current_index]
        options = question["options"]
        correct_index = next((i for i, opt in enumerate(options) if opt["is_correct"]), None)

        # –û—Ç—Å—á—ë—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
        if current_index == 0:
            countdown = ["3Ô∏è‚É£", "2Ô∏è‚É£", "1Ô∏è‚É£"]
            for num in countdown:
                msg = await bot.send_message(chat_id, f"‚è≥ {num}")
                await asyncio.sleep(1)
                await bot.delete_message(chat_id, msg.message_id)

        # üî¢ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫ —Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞
        question_text = f"{current_index + 1}. {question['text']}"

        poll_message = await bot.send_poll(
            chat_id=chat_id,
            question=question_text,
            options=[opt["text"] for opt in options],
            type="quiz",
            correct_option_id=correct_index,
            is_anonymous=False,
        )

        await state.update_data(poll_id=poll_message.poll.id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_question: {e}")
        await bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.")
        await state.clear()



@quiz_router.poll_answer()
async def handle_poll_answer(poll_answer: types.PollAnswer, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (quiz Poll)."""
    try:
        data = await state.get_data()
        chat_id = data.get("chat_id")
        quiz = data.get("quiz")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

        if not chat_id or not quiz or "questions" not in quiz:
            logging.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞: chat_id –∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ FSM.")
            return

        questions = quiz["questions"]
        current_question_index = data.get("current_question_index", 0)

        if current_question_index >= len(questions):
            await poll_answer.bot.send_message(chat_id, "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.")
            return

        question = questions[current_question_index]
        options = question["options"]

        if not poll_answer.option_ids:
            await poll_answer.bot.send_message(chat_id, "‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç.")
            return

        selected_option_id = poll_answer.option_ids[0]
        selected_option = options[selected_option_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–µ–Ω–æ
        if selected_option["is_correct"]:
            correct_answers = data.get("correct_answers", 0) + 1
            await state.update_data(correct_answers=correct_answers)
            await poll_answer.bot.send_message(chat_id, "‚úÖ –í–µ—Ä–Ω–æ!")
        else:
            await poll_answer.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.")

        # –í—ã–≤–æ–¥–∏–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        explanation = question.get("explanation")
        if explanation:
            await poll_answer.bot.send_message(chat_id, f"‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {explanation}")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await state.update_data(current_question_index=current_question_index + 1)

        if current_question_index + 1 >= len(questions):
            await finish_quiz(chat_id, state, poll_answer.bot)
        else:
            await send_question(chat_id, state, poll_answer.bot)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_poll_answer: {e}")
        if state:
            await state.clear()
        await poll_answer.bot.send_message(poll_answer.user.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞.")


async def finish_quiz(chat_id: int, state: FSMContext, bot: Bot):
    """üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –ø–æ–∫–∞–∑ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
    try:
        data = await state.get_data()
        quiz_id = data["quiz_id"]
        db_user_id = data["db_user_id"]
        correct_answers = data["correct_answers"]
        time_taken = int(time.time() - data["start_time"])
        quiz_data = data.get("quiz")  # <-- –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å quiz –¥–ª—è GPT –ø–æ—Å–ª–µ clear()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        existing_result = await asyncio.to_thread(
            supabase.table("results")
            .select("user_id", "score", "time_taken")
            .eq("user_id", db_user_id)
            .eq("quiz_id", quiz_id)
            .limit(1)
            .execute
        )

        if existing_result.data:
            await bot.send_message(chat_id, "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        else:
            result_data = {
                "user_id": db_user_id,
                "quiz_id": quiz_id,
                "score": correct_answers,
                "time_taken": time_taken
            }
            response = await asyncio.to_thread(
                supabase.table("results").insert(result_data).execute
            )
            if response.data is None:
                logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
                await bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
                return
            await bot.send_message(chat_id, "‚úÖ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        leaderboard_response = await asyncio.to_thread(
            supabase.table("results")
            .select("user_id", "score", "time_taken")
            .eq("quiz_id", quiz_id)
            .order("score", desc=True)
            .order("time_taken", desc=False)
            .execute
        )
        leaderboard = leaderboard_response.data or []

        total_participants = len(leaderboard)
        user_position = next((idx + 1 for idx, res in enumerate(leaderboard)
                              if res["user_id"] == db_user_id), None)

        result_message = (
            f"üèÜ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üîπ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct_answers} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
            f"üïí –í—Ä–µ–º—è: {time_taken} —Å–µ–∫\n"
            f"üìä –í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {user_position}/{total_participants}"
        )

        await bot.send_message(chat_id, result_message)

        # –¢–æ–ø-10
        if leaderboard:
            top_results = leaderboard[:10]
            leaderboard_message = await build_leaderboard_message(top_results, supabase)
            await bot.send_message(chat_id, leaderboard_message)

        await asyncio.sleep(2)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –°–ø–∏—Å–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω", callback_data="return_to_quizzes")]
            ]
        )
        await bot.send_message(chat_id, "üìã –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–∏–∫—Ç–æ—Ä–∏–Ω:", reply_markup=keyboard)

        # –ö–Ω–æ–ø–∫–∞ GPT
        gpt_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å GPT", callback_data="ask_gpt")]
            ]
        )

        # –û—á–∏—Å—Ç–∏—Ç—å state –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å quiz –¥–ª—è GPT FSM
        await state.clear()
        await state.update_data(quiz=quiz_data)

        await bot.send_message(chat_id, "‚ùì –•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GPT –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ –ø—É–Ω–∫—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã?",
                               reply_markup=gpt_keyboard)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ finish_quiz: {e}")
        await bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
        await state.clear()

