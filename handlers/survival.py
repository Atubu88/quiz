import asyncio
import time
import os
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from supabase import create_client
from keyboards import start_keyboard
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_API_KEY = os.getenv("SUPABASE_API_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_API_KEY)
# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è
survival_router = Router()
sessions = {}

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
survival_questions = [
    # üìñ –ß—Ç–µ–Ω–∏–µ –ö–æ—Ä–∞–Ω–∞
    {
        "question": "1. –¢—ã —Ä–µ—à–∏–ª —á–∏—Ç–∞—Ç—å –ö–æ—Ä–∞–Ω –≤ –†–∞–º–∞–¥–∞–Ω –ø–æ 10 —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–µ–Ω—å. –û–¥–Ω–∞–∫–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π –º–µ—Å—è—Ü–∞ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 20 —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–µ–Ω—å. –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Ç—ã –ø—Ä–æ—á–∏—Ç–∞–µ—à—å –∑–∞ –≤–µ—Å—å –†–∞–º–∞–¥–∞–Ω (30 –¥–Ω–µ–π)?",
        "answer": "400",
        "explanation": "–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–ª! –ü—Ä–æ—Ä–æ–∫ (Ô∑∫) —Å–∫–∞–∑–∞–ª: ¬´–ö—Ç–æ —á–∏—Ç–∞–µ—Ç –æ–¥–Ω—É –±—É–∫–≤—É –∏–∑ –ö–Ω–∏–≥–∏ –ê–ª–ª–∞—Ö–∞, —Ç–æ–º—É –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞–≥—Ä–∞–¥–∞, –∞ –Ω–∞–≥—Ä–∞–¥–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –≤ 10 —Ä–∞–∑¬ª (–∞—Ç-–¢–∏—Ä–º–∏–∑–∏). –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —Å–∫–æ–ª—å–∫–æ –Ω–∞–≥—Ä–∞–¥—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å –∑–∞ 400 —Å—Ç—Ä–∞–Ω–∏—Ü!"
    },

    # üìö –ü–æ–∫—É–ø–∫–∏ –∏ —Ä–∞—Å—á—ë—Ç—ã
    {
        "question": "2. –¢—ã –∫—É–ø–∏–ª 3 –∫–Ω–∏–≥–∏ –ø–æ  350 —Ä—É–±–ª–µ–π, –Ω–æ –ø—Ä–æ–¥–∞–≤–µ—Ü —Å–¥–µ–ª–∞–ª —Å–∫–∏–¥–∫—É 100 —Ä—É–±–ª–µ–π –Ω–∞ –≤—Å—é –ø–æ–∫—É–ø–∫—É. –°–∫–æ–ª—å–∫–æ —Ç—ã –∑–∞–ø–ª–∞—Ç–∏–ª?",
        "answer": "950",  # (3 √ó 350) - 100 = 950
        "explanation": "–ú–∞—à–∞–õ–ª–∞—Ö! –•–æ—Ä–æ—à–∏–π —Ä–∞—Å—á—ë—Ç. –ü–æ–∫—É–ø–∫–∞ –∑–Ω–∞–Ω–∏–π ‚Äî —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –≤–µ—á–Ω–æ—Å—Ç—å, –≤–µ–¥—å –∑–Ω–∞–Ω–∏—è –≤ –ò—Å–ª–∞–º–µ ‚Äî —ç—Ç–æ –≤–µ–ª–∏–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å."
    },

    # üïå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –º–µ—á–µ—Ç—å
    {
        "question": "3. –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª 3 –¥—Ä—É–∑–µ–π –≤ –º–µ—á–µ—Ç—å. –ö–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –ø—Ä–∏–≥–ª–∞—Å–∏–ª –µ—â—ë 2 —á–µ–ª–æ–≤–µ–∫. –°–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –ø—Ä–∏—à–ª–æ –≤ –º–µ—á–µ—Ç—å –ø–æ—Å—Ä–µ–¥—Ç—Å–≤–æ–º  —Ç–µ–±—è?",
        "answer": "9",  # 3 + (3 √ó 2) = 9
        "explanation": "–ê–ª—å—Ö–∞–º–¥—É–ª–∏–õ–ª—è—Ö! –ü—Ä–æ—Ä–æ–∫ (Ô∑∫) —Å–∫–∞–∑–∞–ª: ¬´–¢–æ—Ç, –∫—Ç–æ –∑–æ–≤—ë—Ç –∫ –±–ª–∞–≥—É, –ø–æ–ª—É—á–∏—Ç —Ç–∞–∫—É—é –∂–µ –Ω–∞–≥—Ä–∞–¥—É, –∫–∞–∫ –∏ —Ç–æ—Ç, –∫—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞–ª –∑–∞ –Ω–∏–º¬ª (–ú—É—Å–ª–∏–º)."
    },

    # üåô –ü–æ—Å—Ç –≤ –†–∞–º–∞–¥–∞–Ω
    {
        "question": "4. –í –†–∞–º–∞–¥–∞–Ω —Ç—ã –ø–æ—Å—Ç–∏—à—å—Å—è 15 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å. –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã –ø—Ä–æ–≤–µ–¥—ë—à—å –≤ –ø–æ—Å—Ç–µ –∑–∞ 30 –¥–Ω–µ–π, –µ—Å–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∏–∑-–∑–∞ –±–æ–ª–µ–∑–Ω–∏?",
        "answer": "435",  # (15 √ó 29) = 435
        "explanation": "–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–ª! –ü—Ä–æ—Ä–æ–∫ (Ô∑∫) —Å–∫–∞–∑–∞–ª: ¬´–¢–æ—Ç, –∫—Ç–æ –ø–æ—Å—Ç–∏—Ç—Å—è –≤ –†–∞–º–∞–¥–∞–Ω —Å –≤–µ—Ä–æ–π –∏ –Ω–∞–¥–µ–∂–¥–æ–π –Ω–∞ –Ω–∞–≥—Ä–∞–¥—É, —Ç–æ–º—É –ø—Ä–æ—Å—Ç—è—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–µ –≥—Ä–µ—Ö–∏¬ª (–ë—É—Ö–∞—Ä–∏, –ú—É—Å–ª–∏–º)."
    },

    # üí∞ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    {
        "question": "5. –¢—ã —Ä–µ—à–∏–ª –æ—Ç–¥–∞—Ç—å —Å–±–æ—Ä—â–∏–∫—É —Ñ–∏—Ç—Ä —Å–∞–¥–∞–∫–∞ 20% –æ—Ç —Å–≤–æ–µ–π —Å—É–º–º—ã . –£ —Ç–µ–±—è –±—ã–ª–æ 5000 —Ä—É–±–ª–µ–π. –°–∫–æ–ª—å–∫–æ —Ç—ã –æ—Ç–¥–∞–ª ?",
        "answer": "1000",  # 5000 √ó 0.2 = 1000
        "explanation": "–ë–∞—Ä–∞–∫–ê–ª–ª–∞—Ö—É —Ñ–∏–∫–∞! –ü—Ä–æ—Ä–æ–∫ (Ô∑∫) —Å–∫–∞–∑–∞–ª: ¬´–°–∞–¥–∞–∫–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç –±–æ–≥–∞—Ç—Å—Ç–≤–æ¬ª (–ú—É—Å–ª–∏–º). –ù–∞–æ–±–æ—Ä–æ—Ç, –æ–Ω–∞ –ø—Ä–∏—É–º–Ω–æ–∂–∞–µ—Ç –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –≤ —Ç–≤–æ–µ–º –∏–º—É—â–µ—Å—Ç–≤–µ!"
    },

    # üõí –ü–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–¥ –∏—Ñ—Ç–∞—Ä–æ–º
    {
        "question": "6. –¢—ã –≥–æ—Ç–æ–≤–∏—à—å—Å—è –∫ –∏—Ñ—Ç–∞—Ä—É –∏ –ø–æ—à—ë–ª –≤ –º–∞–≥–∞–∑–∏–Ω. –¢—ã –∫—É–ø–∏–ª 2 –∫–≥ —Ñ–∏–Ω–∏–∫–æ–≤ –ø–æ 150 —Ä—É–±–ª–µ–π –∑–∞ –∫–≥, 3 —É–ø–∞–∫–æ–≤–∫–∏ —Å–æ–∫–∞ –ø–æ 100 —Ä—É–±–ª–µ–π –∫–∞–∂–¥–∞—è –∏ —Ö–ª–µ–± –∑–∞ 50 —Ä—É–±–ª–µ–π. –°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª?",
        "answer": "650",  # (2√ó150) + (3√ó100) + 50 = 600
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –§–∏–Ω–∏–∫–∏ ‚Äî —ç—Ç–æ —Å—É–Ω–Ω–∞ –¥–ª—è —Ä–∞–∑–≥–æ–≤–µ–Ω–∏—è. –ü—Ä–æ—Ä–æ–∫ (Ô∑∫) –Ω–∞—á–∏–Ω–∞–ª –∏—Ñ—Ç–∞—Ä —Å —Ñ–∏–Ω–∏–∫–æ–≤ –∏–ª–∏ –≤–æ–¥—ã."
    },

    # üìö –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π
    {
        "question": "7. –¢—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª –¥—Ä—É–≥—É –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å—É–Ω–Ω—ã —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–º–∞–∑–∞. –û–Ω –ø–µ—Ä–µ–¥–∞–ª —ç—Ç–æ –¥–≤—É–º —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, –∞ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö —Ä–∞—Å—Å–∫–∞–∑–∞–ª –µ—â—ë —Ç—Ä—ë–º –ª—é–¥—è–º. –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —á–µ–ª–æ–≤–µ–∫ —É–∑–Ω–∞–ª–æ –æ–± —ç—Ç–æ–º, –≤–∫–ª—é—á–∞—è —Ç–µ–±—è?",
        "answer": "10", # 1 (—Ç—ã) + 1√ó2 + 2√ó3 = 10
        "explanation": "–°—É–±—Ö–∞–Ω–ê–ª–ª–∞—Ö! –ü—Ä–æ—Ä–æ–∫ (Ô∑∫) —Å–∫–∞–∑–∞–ª: ¬´–¢–æ—Ç, –∫—Ç–æ –Ω–∞—É—á–∏—Ç –∫–æ–≥–æ-—Ç–æ –±–ª–∞–≥–æ–º—É, –ø–æ–ª—É—á–∏—Ç —Ç–∞–∫—É—é –∂–µ –Ω–∞–≥—Ä–∞–¥—É, –∫–∞–∫ –∏ —Ç–æ—Ç, –∫—Ç–æ —Å–ª–µ–¥—É–µ—Ç —ç—Ç–æ–º—É¬ª (–ú—É—Å–ª–∏–º)."
    },

    # ü§≤ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ
    {
        "question": "8. –¢—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª 4 –¥—Ä—É–∑—å—è–º –æ –Ω–∞–≥—Ä–∞–¥–µ –∑–∞ –ø–æ—Å—Ç –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥. –ï—Å–ª–∏ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –ø–æ–¥–µ–ª–∏–ª—Å—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –µ—â—ë —Å 3 –ª—é–¥—å–º–∏, —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —á–µ–ª–æ–≤–µ–∫ —É–∑–Ω–∞–ª–æ –æ–± —ç—Ç–æ–º?",
        "answer": "16",  # 4 + (4 √ó 3) = 16
        "explanation": "–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–ª! –ü—Ä–æ—Ä–æ–∫ (Ô∑∫) —Å–∫–∞–∑–∞–ª: ¬´–î–µ–ª–∞–π –ø–æ—Å—Ç –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥, –≤–µ–¥—å –≤ —ç—Ç–∏ –¥–Ω–∏ –¥–µ–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ê–ª–ª–∞—Ö—É¬ª (–¢–∏—Ä–º–∏–∑–∏)."
    },

    # üïå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –º–µ—á–µ—Ç–∏
    {
        "question": "9. –¢—ã –º–æ–ª–∏–ª—Å—è –≤ –º–µ—á–µ—Ç–∏, –≥–¥–µ –±—ã–ª–æ 10 —á–µ–ª–æ–≤–µ–∫. –ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ –µ—â—ë X —á–µ–ª–æ–≤–µ–∫. –¢–µ–ø–µ—Ä—å –≤ –º–µ—á–µ—Ç–∏ 25 —á–µ–ª–æ–≤–µ–∫. –ß–µ–º—É —Ä–∞–≤–Ω–æ X?",
        "answer": "15",  # 10 + X = 25 ‚Üí X = 15
        "explanation": "–û—Ç–ª–∏—á–Ω–æ! –ü–æ—Å–µ—â–µ–Ω–∏–µ –º–µ—á–µ—Ç–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ç–≤–æ—é –Ω–∞–≥—Ä–∞–¥—É. –ü—Ä–æ—Ä–æ–∫ (Ô∑∫) —Å–∫–∞–∑–∞–ª: ¬´–ù–∞–º–∞–∑ –≤ –º–µ—á–µ—Ç–∏ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –≤ 27 —Ä–∞–∑ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –º–æ–ª–∏—Ç–≤–æ–π¬ª (–ë—É—Ö–∞—Ä–∏, –ú—É—Å–ª–∏–º)."
    },

    # üíµ –î–æ–ª–≥ –∏ –≤—ã–ø–ª–∞—Ç—ã
    {
        "question": "10. –¢—ã –≤–∑—è–ª –≤ –¥–æ–ª–≥ –Ω–µ–∫—É—é —Å—É–º–º—É –∏ –¥–æ–≥–æ–≤–æ—Ä–∏–ª—Å—è –æ—Ç–¥–∞–≤–∞—Ç—å –ø–æ 500 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞. –°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—ã –≤–∑—è–ª –≤ –¥–æ–ª–≥?",
        "answer": "6000",  # 500 √ó 12 = 6000
        "explanation": "–í–µ—Ä–Ω–æ! –í –ò—Å–ª–∞–º–µ –≤–∞–∂–Ω–æ –≤—ã–ø–ª–∞—á–∏–≤–∞—Ç—å –¥–æ–ª–≥–∏ –≤–æ–≤—Ä–µ–º—è. –ü—Ä–æ—Ä–æ–∫ (Ô∑∫) —Å–∫–∞–∑–∞–ª: –ª—É—á—à–∏–º –∏–∑ –≤–∞—Å —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—Ç, –∫—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ª–≥–∏ –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º‚Äù¬ª. –ê–ª—å-–ë—É—Ö–∞—Ä–∏, 2306 –∏ –ú—É—Å–ª–∏–º, 1601. (–ë—É—Ö–∞—Ä–∏)."
    }
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –í—ã–∂–∏–≤–∞–Ω–∏—è
def survival_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")], [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
restart_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")], [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
    resize_keyboard=True
)

@survival_router.message(F.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def restart_game(message: Message):
    await start_game(message)


@survival_router.message(F.text == "üåô –†–∞–º–∞–¥–∞–Ω-–ö–≤–µ—Å—Ç")
async def survival_mode_entry(message: Message):
    await message.answer(
        "üîã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º '–†–∞–º–∞–¥–∞–Ω –ö–≤–µ—Å—Ç'!</b> üî•\n\n"
        "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>\n"
        "üü¢ –£ –≤–∞—Å <b>3</b> üîã —ç–Ω–µ—Ä–≥–∏–∏.\n"
        "‚ùì –ö–∞–∂–¥—ã–π <b>–≤–æ–ø—Ä–æ—Å</b> ‚Äì –Ω–æ–≤—ã–π <b>—É—Ä–æ–≤–µ–Ω—å</b>.\n"
        "‚è≥ –ù–∞ –æ—Ç–≤–µ—Ç –¥–∞—ë—Ç—Å—è <b>40 —Å–µ–∫—É–Ω–¥</b>.\n"
        "‚ùå –ó–∞ <b>–Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç</b> –∏–ª–∏ <b>–∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏</b> ‚Äì –º–∏–Ω—É—Å <b>1</b> üîã.\n"
        "‚ö° <b>–ì–æ—Ç–æ–≤—ã –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—ã?</b>\n"
        "üéÆ –ù–∞–∂–º–∏—Ç–µ <b>'‚ñ∂ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É'</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üöÄ",
        reply_markup=survival_menu_keyboard(),
        parse_mode="HTML"
    )


@survival_router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    user_id = message.from_user.id
    sessions.pop(user_id, None)
    await message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=start_keyboard())

@survival_router.message(F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
async def start_game(message: Message):
    user_id = message.from_user.id
    if user_id in sessions and sessions[user_id]["active"]:
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π.")
        return

    sessions[user_id] = {
        "lives": 3,
        "question_index": 0,
        "score": 0,
        "waiting_future": None,
        "active": True,
        "start_time": time.time()  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    }

    await message.answer("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£ –≤–∞—Å 3 üîã. –û—Ç–≤–µ—á–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å.")
    await game_loop(message)

async def countdown_timer(message: Message, countdown_msg: Message, total_time: int, waiting_future: asyncio.Future):
    for remaining in range(total_time, 0, -1):
        if waiting_future.done():
            break
        try:
            await message.bot.edit_message_text(
                text=f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫—É–Ω–¥...",
                chat_id=message.chat.id,
                message_id=countdown_msg.message_id
            )
        except Exception:
            pass
        await asyncio.sleep(1)

async def game_loop(message: Message):
    user_id = message.from_user.id

    while user_id in sessions and sessions[user_id]["active"]:
        session = sessions.get(user_id)
        if not session:
            return

        if session["question_index"] >= len(survival_questions):
            await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏!")
            break

        current_level = session["question_index"] + 1
        current_question = survival_questions[session["question_index"]]
        energy = "üîã" * session["lives"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        question_msg = await message.answer(
            f"üÜô –£—Ä–æ–≤–µ–Ω—å {current_level}:\n"
            f"{current_question['question']}\n"
            f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {energy}"
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
        countdown_msg = await message.answer("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å 40 —Å–µ–∫—É–Ω–¥...")

        session["messages_to_edit"] = {
            "question": question_msg.message_id,
            "countdown": countdown_msg.message_id
        }

        # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        loop = asyncio.get_event_loop()
        session["waiting_future"] = loop.create_future()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        timer_task = asyncio.create_task(
            countdown_timer(message, countdown_msg, 40, session["waiting_future"])
        )

        try:
            if user_id not in sessions or not sessions[user_id]["active"]:
                return
            user_answer = await asyncio.wait_for(session["waiting_future"], timeout=44)
        except asyncio.TimeoutError:
            user_answer = None

        timer_task.cancel()

        # –ü–ª–∞–≤–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await asyncio.sleep(0.3)

        # –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        try:
            await message.bot.edit_message_text(
                text="‚úÖ –í–æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω.",
                chat_id=message.chat.id,
                message_id=session["messages_to_edit"]["question"]
            )
        except:
            pass

        try:
            await message.bot.edit_message_text(
                text="‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ." if user_answer is None else "‚åõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞...",
                chat_id=message.chat.id,
                message_id=session["messages_to_edit"]["countdown"]
            )
        except:
            pass

        correct_answer = current_question["answer"].strip().lower()

        if user_answer is None:
            session["lives"] -= 1
            if session["lives"] <= 0:
                await message.answer("‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ, –∏ —É —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —ç–Ω–µ—Ä–≥–∏–∏.")
                break
            else:
                await message.answer("‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        else:
            if user_answer.strip().lower() == correct_answer:
                await message.answer(
                    f"‚úÖ –£—Ä–æ–≤–µ–Ω—å {current_level} –ø—Ä–æ–π–¥–µ–Ω!\n\n"
                    f"{current_question['explanation']}"
                )
                session["score"] += 1
                session["question_index"] += 1
            else:
                session["lives"] -= 1
                if session["lives"] <= 0:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç–Ω–µ—Ä–≥–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.")
                    break
                else:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    # ‚õîÔ∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
    session = sessions.get(user_id)
    if not session:
        await message.answer("‚ö†Ô∏è –ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
    elapsed_time = time.time() - session["start_time"]
    minutes, seconds = divmod(int(elapsed_time), 60)

    first_name = message.from_user.first_name or ""
    username = message.from_user.username or ""
    display_name = first_name or username or "–ê–Ω–æ–Ω–∏–º"

    score = session["score"]
    time_spent = int(elapsed_time)

    existing_record = supabase.table("survival_results").select("id", "score", "time_spent").eq("user_id", user_id).execute()

    if existing_record.data:
        supabase.table("survival_results").update({
            "score": score,
            "time_spent": time_spent
        }).eq("user_id", user_id).execute()
    else:
        supabase.table("survival_results").insert({
            "user_id": user_id,
            "username": display_name,
            "score": score,
            "time_spent": time_spent
        }).execute()

    result = supabase.table("survival_results").select("user_id", "score").order("score", desc=True).execute()
    all_results = result.data
    total_players = len(all_results)
    position = next((i + 1 for i, res in enumerate(all_results) if res["user_id"] == user_id), "N/A")

    await message.answer(
        f"üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üìä\n"
        f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {score}\n"
        f"‚è± –í—Ä–µ–º—è –∏–≥—Ä—ã: {minutes} –º–∏–Ω {seconds} —Å–µ–∫.\n"
        f"üèÜ –¢—ã –∑–∞–Ω—è–ª *{position}-–µ –º–µ—Å—Ç–æ* –∏–∑ {total_players} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
        reply_markup=restart_keyboard,
        parse_mode="Markdown"
    )

    sessions.pop(user_id, None)



@survival_router.message()
async def handle_answers(message: Message):
    user_id = message.from_user.id
    session = sessions.get(user_id)
    if session and session.get("waiting_future") and not session["waiting_future"].done():
        session["waiting_future"].set_result(message.text)

