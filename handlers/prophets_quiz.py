import random
import uuid
import logging
from aiogram import Router, Bot, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from supabase import create_client, Client
from config import SUPABASE_URL, SUPABASE_API_KEY
import time
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_API_KEY)
prophets_quiz_router = Router()

ADMIN_ID = 732402669
#CHANNEL_ID = -1002392900552
CHANNEL_ID = -1002487599337
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
quiz_sessions = {}

@prophets_quiz_router.message(Command("send_quiz_post"))
async def send_quiz_post(message: types.Message, bot: Bot):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    response = supabase.table("quizzes_new").select("id, title").execute()
    quizzes = response.data

    if not quizzes:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω.")
        return

    buttons = []
    for quiz in quizzes:
        quiz_id = quiz["id"]
        quiz_title = quiz["title"]
        buttons.append([
            InlineKeyboardButton(
                text=quiz_title,
                callback_data=f"select_quiz_{quiz_id}"
            )
        ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:", reply_markup=keyboard)

@prophets_quiz_router.callback_query(F.data.startswith("select_quiz_"))
async def process_quiz_selection(callback_query: types.CallbackQuery, bot: Bot):
    quiz_id = int(callback_query.data.split("_")[2])
    await callback_query.answer("‚úÖ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–∞–Ω–∞–ª...")

    bot_username = (await bot.me()).username

    quiz_resp = supabase.table("quizzes_new").select("title, difficulty").eq("id", quiz_id).execute()
    if quiz_resp.data:
        quiz_title = quiz_resp.data[0]["title"]
        quiz_difficulty = quiz_resp.data[0].get("difficulty") or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    else:
        quiz_title = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        quiz_difficulty = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üß† –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                    url=f"https://t.me/{bot_username}?start=quiz_{quiz_id}"
                )
            ]
        ]
    )

    text_for_channel = (
        f"<b>üß† –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É –∏ –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!</b> üéØ\n\n"
        f"<b>üìå –ù–∞–∑–≤–∞–Ω–∏–µ:</b> ¬´{quiz_title}¬ª\n"
        f"<b>üî∞ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</b> {quiz_difficulty}\n\n"
        "‚ùì –í —ç—Ç–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –≤–∞–º –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. "
        "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ</b> üî•\n\n"
        "‚¨áÔ∏è <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</b>"
    )

    await bot.send_message(
        chat_id=CHANNEL_ID,
        text=text_for_channel,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


async def start_quiz(chat_id: int, user_id: int, quiz_id: int, bot: Bot):
    """
    –ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –°–æ—Ö—Ä–∞–Ω—è–µ–º start_time, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.
    """
    quiz_resp = supabase.table("quizzes_new").select("correct_order").eq("id", quiz_id).execute()
    if not quiz_resp.data:
        await bot.send_message(chat_id, "‚õî –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    correct_order = quiz_resp.data[0]["correct_order"]
    shuffled_list = correct_order.copy()
    random.shuffle(shuffled_list)

    # –†—É—á–Ω–æ–π upsert –≤ user_attempts (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö)
    existing_resp = supabase.table("user_attempts").select("*") \
        .eq("user_id", user_id).eq("quiz_id", quiz_id).execute()
    if existing_resp.data:
        supabase.table("user_attempts").update({"selected_count": 0}) \
            .eq("user_id", user_id).eq("quiz_id", quiz_id).execute()
    else:
        supabase.table("user_attempts").insert({
            "user_id": user_id,
            "quiz_id": quiz_id,
            "selected_count": 0
        }).execute()

    # (–ù–æ–≤–∞—è —á–∞—Å—Ç—å) –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    start_time = time.time()

    # –ì–æ—Ç–æ–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    unselected_dict = {}
    for item in shuffled_list:
        key = str(uuid.uuid4())[:8]
        unselected_dict[key] = item

    quiz_sessions[user_id] = {
        "quiz_id": quiz_id,
        "correct_order": correct_order,
        "unselected_dict": unselected_dict,
        "selected_prophets": [],
        "start_time": start_time  # (–ù–æ–≤–∞—è —á–∞—Å—Ç—å) –ó–∞–ø–∏—Å–∞–ª–∏ –≤ —Å–µ—Å—Å–∏—é
    }

    keyboard = build_keyboard(selected_list=[], unselected_dict=unselected_dict)
    await bot.send_message(
        chat_id=chat_id,
        text=(
            "üéØ *–í—ã –Ω–∞—á–∞–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!*\n\n"
            "üìå –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ _–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ_ ‚Äì –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ.\n"
            "‚úÖ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç _–ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –Ω–∞–≤–µ—Ä—Ö_ —Å –≥–∞–ª–æ—á–∫–æ–π.\n\n"
            "–í—Ä–µ–º—è —É–∂–µ –ø–æ—à–ª–æ!"
        ),
        parse_mode="Markdown",
        reply_markup=keyboard
    )

def build_keyboard(selected_list: list, unselected_dict: dict) -> InlineKeyboardMarkup:
    rows = []
    # –°–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
    for item in selected_list:
        btn_text = f"‚úÖ {item}"
        btn_data = "already_chosen"
        rows.append([InlineKeyboardButton(text=btn_text, callback_data=btn_data)])

    # –ó–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    for key_uuid, full_text in unselected_dict.items():
        btn_data = f"choose_{key_uuid}"
        rows.append([InlineKeyboardButton(text=full_text, callback_data=btn_data)])

    return InlineKeyboardMarkup(inline_keyboard=rows)

@prophets_quiz_router.callback_query(F.data.startswith("choose_") | (F.data == "already_chosen"))
async def process_choice(callback_query: types.CallbackQuery, bot: Bot):
    logging.info(f"Callback data = '{callback_query.data}'")

    user_id = callback_query.from_user.id
    data = callback_query.data

    if data == "already_chosen":
        await callback_query.answer("‚ö†Ô∏è –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç!")
        return

    uuid_key = data.replace("choose_", "")

    session = quiz_sessions.get(user_id)
    if not session:
        await callback_query.answer("‚õî –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    unselected_dict = session["unselected_dict"]
    selected_list = session["selected_prophets"]
    quiz_id = session["quiz_id"]

    if uuid_key not in unselected_dict:
        await callback_query.answer("‚õî –≠—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞!", show_alert=True)
        return

    chosen_item = unselected_dict.pop(uuid_key)
    selected_list.append(chosen_item)

    # –û–±–Ω–æ–≤–ª—è–µ–º selected_count –≤ user_attempts
    new_count = len(selected_list)
    supabase.table("user_attempts").update({"selected_count": new_count}) \
        .eq("user_id", user_id).eq("quiz_id", quiz_id).execute()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤—ã–±—Ä–∞–Ω—ã
    if new_count == len(session["correct_order"]):
        await finalize_quiz(callback_query, bot, session)
    else:
        keyboard = build_keyboard(selected_list, unselected_dict)
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        await callback_query.answer("‚úÖ –í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")


import time
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

async def finalize_quiz(callback_query: types.CallbackQuery, bot: Bot, session: dict):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É:
    1) –°—á–∏—Ç–∞–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å—Å—Ç–∞–≤–∏–ª –ø–æ—Ä—è–¥–æ–∫
    2) –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ quiz_results (is_correct, time_taken)
    3) –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Å—Ç–æ (—Å—Ä–µ–¥–∏ is_correct, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ time_taken)
    4) –í—ã–≤–æ–¥–∏—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
    5) –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—É—é —Å—Å—ã–ª–∫—É (extra_link), –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    6) –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª"
    """
    user_id = callback_query.from_user.id
    quiz_id = session["quiz_id"]
    correct_order = session["correct_order"]
    selected_prophets = session["selected_prophets"]

    # 1) –°—á–∏—Ç–∞–µ–º –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    end_time = time.time()
    time_taken = round(end_time - session["start_time"], 2)  # —Å–µ–∫.

    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
    is_correct = (selected_prophets == correct_order)

    # 3) –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ quiz_results (upsert)
    existing_resp = supabase.table("quiz_results").select("*") \
        .eq("user_id", user_id).eq("quiz_id", quiz_id).execute()
    if existing_resp.data:
        supabase.table("quiz_results").update({
            "is_correct": is_correct,
            "time_taken": time_taken
        }).eq("user_id", user_id).eq("quiz_id", quiz_id).execute()
    else:
        supabase.table("quiz_results").insert({
            "user_id": user_id,
            "quiz_id": quiz_id,
            "is_correct": is_correct,
            "time_taken": time_taken
        }).execute()

    # 4) –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
    quiz_sessions.pop(user_id, None)

    # 5) –ë–µ—Ä—ë–º —Å—Å—ã–ª–∫—É (extra_link) –∏–∑ quizzes_new (–µ—Å–ª–∏ –µ—Å—Ç—å)
    quiz_resp = supabase.table("quizzes_new").select("extra_link") \
        .eq("id", quiz_id).execute()
    if quiz_resp.data and quiz_resp.data[0].get("extra_link"):
        extra_link = quiz_resp.data[0]["extra_link"]
    else:
        extra_link = None

    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —á–∏—Å–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    total_resp = supabase.table("quiz_results").select("*", count="exact").eq("quiz_id", quiz_id).execute()
    total_count = total_resp.count or 0

    correct_resp = supabase.table("quiz_results").select("*", count="exact") \
        .eq("quiz_id", quiz_id).eq("is_correct", True).execute()
    correct_count = correct_resp.count or 0

    correct_pct = round(correct_count / total_count * 100, 2) if total_count > 0 else 0

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —Å—á–∏—Ç–∞–µ–º –º–µ—Å—Ç–æ –ø–æ time_taken
    place_text = ""
    if is_correct:
        all_correct = supabase.table("quiz_results") \
            .select("user_id, time_taken") \
            .eq("quiz_id", quiz_id) \
            .eq("is_correct", True) \
            .execute().data

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ time_taken (–º–µ–Ω—å—à–µ = –≤—ã—à–µ –º–µ—Å—Ç–æ)
        def time_key(rec):
            return rec["time_taken"] if rec["time_taken"] is not None else float('inf')

        ranking = sorted(all_correct, key=time_key)

        rank = None
        for i, record in enumerate(ranking, start=1):
            if record["user_id"] == user_id:
                rank = i
                break

        total_correct_players = len(ranking)
        place_text = (
            f"\n\n–í—ã –∑–∞–Ω—è–ª–∏ {rank}-–µ –º–µ—Å—Ç–æ –∏–∑ {total_correct_players} (—Å—Ä–µ–¥–∏ –æ—Ç–≤–µ—Ç–∏–≤—à–∏—Ö –≤–µ—Ä–Ω–æ).\n"
            f"–ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {time_taken} —Å–µ–∫."
        )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
    comparison_lines = []
    for sel, cor in zip(selected_prophets, correct_order):
        if sel == cor:
            comparison_lines.append(f"{sel} ‚úÖ")
        else:
            comparison_lines.append(f"{sel} ‚ùå –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: {cor}")
    comparison_text = "\n".join(comparison_lines)

    # -- –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É(–∏) --
    if is_correct:
        # –ï—Å–ª–∏ –ø–æ—Ä—è–¥–æ–∫ –≤–µ—Ä–Ω—ã–π ‚Äì –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª"
        header = "üéâ *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫!*"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª",
                        url="https://t.me/islamquizes"
                    )
                ]
            ]
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ ‚Äì –¥–≤–µ –∫–Ω–æ–ø–∫–∏: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞" –∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª"
        header = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫!"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                        callback_data=f"retry_quiz_{quiz_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª",
                        url="https://t.me/islamquizes"
                    )
                ]
            ]
        )

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = (
        f"{header}\n\n"
        f"–í–∞—à –æ—Ç–≤–µ—Ç:\n{comparison_text}\n\n"
        f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_count}, –∏–∑ –Ω–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_count} ({correct_pct}%)."
        f"{place_text}"
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ - –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü
    if extra_link:
        text += f"\n\nüìÑ [–ö–†–ê–¢–ö–ê–Ø –ò–ù–§–ê –ü–û –í–ò–ö–¢–û–†–ò–ù–ï]({extra_link})"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(
        chat_id=user_id,
        text=text,
        parse_mode="Markdown",
        disable_web_page_preview=False,  # üîπ –û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–∫–∏
        reply_markup = keyboard
    )



@prophets_quiz_router.callback_query(F.data.startswith("retry_quiz_"))
async def retry_quiz(callback_query: types.CallbackQuery, bot: Bot):
    quiz_id_str = callback_query.data.replace("retry_quiz_", "")
    if quiz_id_str.isdigit():
        quiz_id = int(quiz_id_str)
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: chat_id = user_id
        await start_quiz(callback_query.from_user.id, callback_query.from_user.id, quiz_id, bot)
        await callback_query.answer("üîÑ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞!")
    else:
        await callback_query.answer("‚õî –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π ID –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.", show_alert=True)

