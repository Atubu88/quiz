import logging
import os
import asyncio
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
import asyncpg  # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ PostgreSQL
from supabase import create_client
from keyboards import start_keyboard
from handlers.pair_matching_game import start_matching_quiz
from handlers.prophets_quiz import start_quiz

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
start_router = Router()

# –ü—É—Ç—å –¥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
MEDIA_PATH = os.path.join(os.getcwd(), "media", "welcome1.png")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_API_KEY = os.getenv("SUPABASE_API_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_API_KEY)


async def upsert_user_supabase(user_data: dict):
    """
    –ü–∏—à–µ–º (upsert) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É "users" Supabase
    –ø–æ –ø–æ–ª—é "telegram_id". –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ telegram_id UNIQUE.
    """
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º upsert, —É–∫–∞–∑—ã–≤–∞—è on_conflict="telegram_id"
        response = await asyncio.to_thread(
            supabase.table("users")
            .upsert(user_data, on_conflict="telegram_id")
            .execute
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–∫–∏
        if response.data is None:
            # –ï—Å–ª–∏ data=None, –∑–Ω–∞—á–∏—Ç —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            logging.error(
                f"–û—à–∏–±–∫–∞ upsert_user_supabase: status_code={response.status_code}, "
                f"error_message={response.error_message}"
            )
        else:
            logging.info(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']} ({user_data['username']}) "
                "—É—Å–ø–µ—à–Ω–æ upsert –≤ Supabase."
            )
    except Exception as e:
        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ upsert_user_supabase: {e}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å retry‚Äë–ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ


@start_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    """
    –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ /start. –ï—Å–ª–∏ /start —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä quiz_..., –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.
    –ï—Å–ª–∏ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ' –º–µ–Ω—é.
    """
    user = message.from_user
    args = message.text.split()
    logging.info(f"üîπ /start –æ—Ç {user.id}, args={args}")
    logging.info(f"üîπ –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã: {args}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ deep link, –Ω–∞–ø—Ä–∏–º–µ—Ä /start quiz_5
    if len(args) > 1:
        if args[1].startswith("quiz_"):
            quiz_id_str = args[1].replace("quiz_", "")
            if quiz_id_str.isdigit():
                quiz_id = int(quiz_id_str)
                logging.info(f"Deep link –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É quiz_{quiz_id}")
                await start_quiz(message.chat.id, user.id, quiz_id, bot)
                return
            else:
                await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç quiz_ID!")
                return
        elif args[1].startswith("matching_quiz_"):
            quiz_id_str = args[1].replace("matching_quiz_", "")
            if quiz_id_str.isdigit():
                quiz_id = int(quiz_id_str)
                logging.info(f"Deep link –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É matching_quiz_{quiz_id}")
                await start_matching_quiz(message.chat.id, user.id, quiz_id, bot)
                return
            else:
                await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç quiz_ID!")
                return


        else:
            await message.answer("‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è /start.")
            return

    # ----- –ï—Å–ª–∏ —Å—é–¥–∞ –¥–æ—à–ª–∏, –∑–Ω–∞—á–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç -> –æ–±—ã—á–Ω—ã–π /start -----
    loading_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")

    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Supabase
    user_data = {
        "telegram_id": user.id,
        "username": user.username or "",
        "first_name": user.first_name or "",
        "last_name": user.last_name or ""
    }
    # –ó–∞–ø—É—Å–∫–∞–µ–º upsert –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    asyncio.create_task(upsert_user_supabase(user_data))

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∑–∫–∞..."
    await loading_msg.delete()



    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ ‚Äì –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    if os.path.exists(MEDIA_PATH):
        try:
            photo_file = FSInputFile(MEDIA_PATH)
            await message.answer_photo(
                photo=photo_file,
                caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n–í—ã–±–µ—Ä–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –Ω–∞—á–∏–Ω–∞–π –∏–≥—Ä–∞—Ç—å! üéÆ",
                reply_markup=start_keyboard()  # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏
            )
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ –º–µ–Ω—é üéÆ",
                reply_markup=start_keyboard()  # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏
            )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ –º–µ–Ω—é üéÆ",
            reply_markup=start_keyboard()  # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏
        )


@start_router.message(Command("reset"))
async def cmd_reset(message: types.Message, state: FSMContext):
    """
    –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –∫–æ–º–∞–Ω–¥–æ–π /reset.
    """
    await state.clear()
    await message.answer("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
