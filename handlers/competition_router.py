import asyncio
import logging
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from supabase import create_client
from config import SUPABASE_URL, SUPABASE_API_KEY
from utils import build_leaderboard_message  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

# –ü–æ–¥–∫–ª—é—á–∞–µ–º Supabase
supabase = create_client(SUPABASE_URL, SUPABASE_API_KEY)

# –°–æ–∑–¥–∞—ë–º –ù–û–í–´–ô —Ä–æ—É—Ç–µ—Ä, –Ω–µ —Å–º–µ—à–∏–≤–∞—è –µ–≥–æ —Å –¥—Ä—É–≥–∏–º–∏
competition_router = Router()

@competition_router.message(Command("send_post"))
async def send_competition_post(message: types.Message, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–∞–Ω–∞–ª –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞).
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (ADMIN_ID).
    """
    ADMIN_ID = 732402669
    CHANNEL_ID = -1002487599337  # –í–∞—à –∫–∞–Ω–∞–ª

    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    text = (
        "üî• <b>–ü–æ—á—É–≤—Å—Ç–≤—É–π –¥—É—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è, –∏—Å–ø—ã—Ç–∞–π —Å–µ–±—è!</b>\n"
        "üìä <b>–í –Ω–∞—à–µ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –µ—Å—Ç—å –î–í–ê —Ä–µ–π—Ç–∏–Ω–≥–∞:</b>\n\n"
        "ü•á üìã <b>–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞</b> ‚Äì –¢–û–ü-10 –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.\n"
        "üèÜ üåü <b>–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥</b> ‚Äì –¢–û–ü-10 –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤—Å–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–º —Å—É–º–º–∞—Ä–Ω–æ.\n\n"
        "‚ö° <b>–û—Ç–≤–µ—á–∞–π –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ!</b> –ï—Å–ª–∏ –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞–±—Ä–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, "
        "–≤—ã—à–µ –æ–∫–∞–∂–µ—Ç—Å—è —Ç–æ—Ç, –∫—Ç–æ –ø—Ä–æ—à—ë–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –±—ã—Å—Ç—Ä–µ–µ.\n\n"
        "üöÄ <b>–ü—Ä–æ–≤–µ—Ä—å –∏ –æ–±–Ω–æ–≤–∏ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!</b>\n"
    )

    # –ö–Ω–æ–ø–∫–∏: –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É, –æ—Ç–∫—Ä—ã—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Ç–∞–±–ª–∏—Ü—É, –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É üí™", url="https://t.me/islamikum_bot")],
            [InlineKeyboardButton(text="üìã –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞", callback_data="open_leaderboard")],
            [InlineKeyboardButton(text="üåü –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="show_general_leaderboard")]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –ø–æ—Å—Ç
    await bot.send_message(
        chat_id=CHANNEL_ID,
        text=text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

    # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É
    await message.answer("‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª (–æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞).")


@competition_router.callback_query(F.data == "open_leaderboard")
async def open_leaderboard_callback(callback_query: types.CallbackQuery, bot: Bot):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "üìã –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞" –≤ –∫–∞–Ω–∞–ª–µ:
      1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω
      2) –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    """
    await callback_query.answer()  # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"

    try:
        response = await asyncio.to_thread(
            supabase.table("quizzes").select("id, title").execute
        )
        quizzes = response.data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω: {e}")
        msg = await callback_query.message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω.\n\n"
            "–ß—Ç–æ–± –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."
        )
        asyncio.create_task(delete_message_after_delay(bot, msg.chat.id, msg.message_id, 30))
        return

    if not quizzes:
        msg = await callback_query.message.answer(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω.\n\n"
            "–ß—Ç–æ–± –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."
        )
        asyncio.create_task(delete_message_after_delay(bot, msg.chat.id, msg.message_id, 30))
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º callback_data "leaderboard_<quiz_id>"
    inline_keyboard = []
    for quiz in quizzes:
        quiz_id = quiz["id"]
        quiz_title = quiz["title"]
        inline_keyboard.append([
            InlineKeyboardButton(text=quiz_title, callback_data=f"leaderboard_{quiz_id}")
        ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    msg = await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:\n\n"
        "–ß—Ç–æ–± –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.",
        reply_markup=keyboard
    )
    asyncio.create_task(delete_message_after_delay(bot, msg.chat.id, msg.message_id, 30))


@competition_router.callback_query(F.data.startswith("leaderboard_"))
async def show_leaderboard_for_quiz(callback_query: types.CallbackQuery, bot: Bot):
    """
    –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:
      - –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      - –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ build_leaderboard_message
      - –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    """
    await callback_query.answer()

    parts = callback_query.data.split("_")
    if len(parts) != 2:
        return  # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data

    try:
        quiz_id = int(parts[1])
    except ValueError:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
    try:
        quiz_resp = await asyncio.to_thread(
            supabase.table("quizzes").select("title").eq("id", quiz_id).single().execute
        )
        quiz_data = quiz_resp.data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã {quiz_id}: {e}")
        msg = await callback_query.message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.\n\n"
            "–ß—Ç–æ–± –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."
        )
        asyncio.create_task(delete_message_after_delay(bot, msg.chat.id, msg.message_id, 30))
        return

    if not quiz_data:
        msg = await callback_query.message.answer(
            "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "–ß—Ç–æ–± –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."
        )
        asyncio.create_task(delete_message_after_delay(bot, msg.chat.id, msg.message_id, 30))
        return

    quiz_title = quiz_data["title"]

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    try:
        result_resp = await asyncio.to_thread(
            supabase.table("results")
            .select("user_id, score, time_taken")
            .eq("quiz_id", quiz_id)
            .order("score", desc=True)    # –æ—á–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            .order("time_taken", desc=False)  # –≤—Ä–µ–º—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
            .limit(10)
            .execute
        )
        results = result_resp.data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã {quiz_id}: {e}")
        msg = await callback_query.message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n\n"
            "–ß—Ç–æ–± –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."
        )
        asyncio.create_task(delete_message_after_delay(bot, msg.chat.id, msg.message_id, 30))
        return

    if not results:
        msg = await callback_query.message.answer(
            f"–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ¬´{quiz_title}¬ª.\n\n"
            "–ß—Ç–æ–± –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."
        )
        asyncio.create_task(delete_message_after_delay(bot, msg.chat.id, msg.message_id, 30))
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    leaderboard_text = await build_leaderboard_message(results, supabase)

    msg = await callback_query.message.answer(
        f"üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è ¬´{quiz_title}¬ª:\n{leaderboard_text}\n\n"
        "–ß—Ç–æ–± –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."
    )
    asyncio.create_task(delete_message_after_delay(bot, msg.chat.id, msg.message_id, 30))


@competition_router.callback_query(F.data == "show_general_leaderboard")
async def show_general_leaderboard_callback(callback_query: types.CallbackQuery, bot: Bot):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "üåü –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥" –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥,
    —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ build_leaderboard_message –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.
    """
    await callback_query.answer()

    try:
        total_resp = await asyncio.to_thread(
            supabase.rpc("get_total_scores").execute
        )
        results = total_resp.data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        msg = await callback_query.message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.\n\n"
            "–ß—Ç–æ–± –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."
        )
        asyncio.create_task(delete_message_after_delay(bot, msg.chat.id, msg.message_id, 30))
        return

    if not results:
        msg = await callback_query.message.answer(
            "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n\n"
            "–ß—Ç–æ–± –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."
        )
        asyncio.create_task(delete_message_after_delay(bot, msg.chat.id, msg.message_id, 30))
        return

    # –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è build_leaderboard_message
    top_10 = []
    for row in results[:10]:
        top_10.append({
            "user_id": row["user_id"],
            "score": int(row["total_score"]),
            "time_taken": int(row["total_time"]) if row["total_time"] is not None else 0
        })

    leaderboard_text = await build_leaderboard_message(top_10, supabase)

    msg = await callback_query.message.answer(
        f"üåü –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:\n{leaderboard_text}\n\n"
        "–ß—Ç–æ–± –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."
    )
    asyncio.create_task(delete_message_after_delay(bot, msg.chat.id, msg.message_id, 30))


async def delete_message_after_delay(bot: Bot, chat_id: int, message_id: int, delay: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥."""
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ —á–∞—Ç–∞ {chat_id}: {e}")
