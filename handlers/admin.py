import logging
import asyncio
import os
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from supabase import create_client
from dotenv import load_dotenv

load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_API_KEY = os.getenv("SUPABASE_API_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_API_KEY)

admin_router = Router()
ADMIN_IDS = ['732402669', '7919126514']  # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

def is_admin(user_id):
    return str(user_id) in ADMIN_IDS




# –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@admin_router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if is_admin(message.from_user.id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É', callback_data='add_quiz')],
            [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É', callback_data='delete_quiz')],
            [InlineKeyboardButton(text='üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data='reset_tournament')]
        ])
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã (–∏ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞)
@admin_router.callback_query(F.data == 'reset_tournament')
async def reset_tournament_table(callback_query: types.CallbackQuery):
    if is_admin(callback_query.from_user.id):
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å', callback_data='confirm_reset_tournament')],
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')]
        ])
        await callback_query.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥?",
                                             reply_markup=confirm_keyboard)
    else:
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
@admin_router.callback_query(F.data == 'confirm_reset_tournament')
async def confirm_reset_tournament(callback_query: types.CallbackQuery):
    if is_admin(callback_query.from_user.id):
        await asyncio.to_thread(supabase.table("results").update({"score": 0}).neq("id", None).execute)
        await callback_query.message.answer("–í—Å–µ –±–∞–ª–ª—ã –æ–±–Ω—É–ª–µ–Ω—ã. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ.")
    else:
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
@admin_router.callback_query(F.data == 'cancel')
async def cancel_action(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–î–æ–±–∞–≤–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É" ‚Äì –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@admin_router.callback_query(F.data == 'add_quiz')
async def request_quiz_text(callback_query: types.CallbackQuery):
    if is_admin(callback_query.from_user.id):
        await callback_query.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –í–∞–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç:\n"
            "1. –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Ç–µ–º—ã –∏ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n"
            "2. –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å '-'.\n"
            "3. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)."
        )
        await callback_query.message.answer(
            "–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "–¢–µ–º–∞: –ó–∞–∫–æ–Ω—ã –í—Å–µ–ª–µ–Ω–Ω–æ–π\n\n"
            "1. –ö–∞–∫–æ–π –∑–∞–∫–æ–Ω —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏?\n"
            "- –ó–∞–∫–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏\n"
            "- –ó–∞–∫–æ–Ω –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è\n"
            "- –ó–∞–∫–æ–Ω –∫–∞—Ä–º—ã\n"
            "- –ó–∞–∫–æ–Ω —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è\n"
            "–û—Ç–≤–µ—Ç: 1\n"
            "–ü–æ—è—Å–Ω–µ–Ω–∏–µ: –≠–Ω–µ—Ä–≥–∏—è –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∏–∑ –æ–¥–Ω–æ–π —Ñ–æ—Ä–º—ã –≤ –¥—Ä—É–≥—É—é.\n"
        )
    else:
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–¢–µ–º–∞:" –∏–ª–∏ "TEMA:")
@admin_router.message(lambda message: message.text.startswith(("–¢–µ–º–∞:", "TEMA:", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:")))
async def handle_text_quiz(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        lines = message.text.splitlines()

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_name = None
        if lines[0].startswith("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:"):
            category_name = lines[0].replace("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", "").strip()
            lines = lines[1:]  # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤–∞—è ‚Äî —ç—Ç–æ "–¢–µ–º–∞:..."

        # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        if lines[0].startswith("TEMA:"):
            language_keys = {"topic": "TEMA:", "answer": "Svar:", "explanation": "F√∂rklaring:"}
        elif lines[0].startswith("–¢–µ–º–∞:"):
            language_keys = {"topic": "–¢–µ–º–∞:", "answer": "–û—Ç–≤–µ—Ç:", "explanation": "–ü–æ—è—Å–Ω–µ–Ω–∏–µ:"}
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")

        title = lines[0].replace(language_keys["topic"], "").strip()
        questions = []
        current_question = None

        for line in lines[1:]:
            if line.strip() == "":
                continue
            if line[0].isdigit():
                if current_question:
                    if not current_question["options"]:
                        raise ValueError(f"–£ –≤–æ–ø—Ä–æ—Å–∞ '{current_question['question']}' –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.")
                    if current_question["correct"] is None:
                        raise ValueError(f"–£ –≤–æ–ø—Ä–æ—Å–∞ '{current_question['question']}' –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.")
                    questions.append(current_question)
                parts = line.split(". ", 1)
                if len(parts) < 2:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–∞.")
                current_question = {
                    "question": parts[1].strip(),
                    "options": [],
                    "correct": None,
                    "explanation": None,
                }
            elif line.startswith(language_keys["answer"]):
                correct_option_id = int(line.replace(language_keys["answer"], "").strip()) - 1
                current_question["correct"] = correct_option_id
            elif line.startswith(language_keys["explanation"]):
                current_question["explanation"] = line.replace(language_keys["explanation"], "").strip()
            elif line.strip().startswith("-"):
                current_question["options"].append(line.strip().replace("-", "").strip())
            else:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: '{line}'")

        if current_question:
            questions.append(current_question)

        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: —Å–æ–∑–¥–∞—ë–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º
        category_id = None
        if category_name:
            category_resp = await asyncio.to_thread(
                supabase.table("categories")
                .select("id")
                .eq("name", category_name)
                .limit(1)
                .execute
            )
            if category_resp.data:
                category_id = category_resp.data[0]["id"]
            else:
                new_cat = await asyncio.to_thread(
                    supabase.table("categories")
                    .insert({"name": category_name, "is_active": True})
                    .execute
                )
                category_id = new_cat.data[0]["id"]

        # 4. –°–æ–∑–¥–∞—ë–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        quiz_data = {"title": title, "is_active": True}
        if category_id:
            quiz_data["category_id"] = category_id

        quiz_response = await asyncio.to_thread(
            supabase.table("quizzes").insert(quiz_data).execute
        )
        quiz_id = quiz_response.data[0]["id"]

        # 5. –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        for q in questions:
            question_response = await asyncio.to_thread(
                supabase.table("questions").insert({
                    "text": q["question"],
                    "quiz_id": quiz_id,
                    "explanation": q.get("explanation")
                }).execute
            )
            question_id = question_response.data[0]["id"]
            options_data = [
                {
                    "text": opt,
                    "is_correct": (idx == q["correct"]),
                    "question_id": question_id
                }
                for idx, opt in enumerate(q["options"])
            ]
            await asyncio.to_thread(supabase.table("options").insert(options_data).execute)

        await message.answer(f"‚úÖ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ¬´{title}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


# üëá –ù–∞—á–∞–ª–æ –ª–æ–≥–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

# 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@admin_router.callback_query(F.data == 'delete_quiz')
async def choose_category_to_delete_quiz(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    categories_resp = await asyncio.to_thread(
        supabase.table("categories").select("id, name").eq("is_active", True).execute
    )
    categories = categories_resp.data or []

    if not categories:
        await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return

    buttons = [
        [InlineKeyboardButton(text=f"üìÇ {cat['name']}", callback_data=f"admin_delete_category_{cat['id']}")]
        for cat in categories
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)


# 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data.startswith("admin_delete_category_"))
async def choose_quiz_in_category_to_delete(callback_query: types.CallbackQuery):
    await callback_query.message.edit_reply_markup(reply_markup=None)

    category_id = int(callback_query.data.split("_")[-1])
    quizzes_resp = await asyncio.to_thread(
        supabase.table("quizzes").select("id, title").eq("category_id", category_id).execute
    )
    quizzes = quizzes_resp.data or []

    if not quizzes:
        await callback_query.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω.")
        return

    buttons = [
        [InlineKeyboardButton(text=f"‚ùå {q['title']}", callback_data=f"admin_delete_quiz_{q['id']}")]
        for q in quizzes
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


# 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@admin_router.callback_query(F.data.startswith("admin_delete_quiz_"))
async def confirm_deletion_quiz(callback_query: types.CallbackQuery):
    await callback_query.message.edit_reply_markup(reply_markup=None)

    quiz_id = int(callback_query.data.split("_")[-1])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_delete_{quiz_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ])
    await callback_query.message.answer(
        f"–£–¥–∞–ª–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å ID {quiz_id}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=kb
    )


# 4. –£–¥–∞–ª—è–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@admin_router.callback_query(F.data.startswith("admin_confirm_delete_"))
async def admin_final_delete(callback_query: types.CallbackQuery):
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
        quiz_id = int(callback_query.data.split("_")[-1])

        quiz_resp = await asyncio.to_thread(
            supabase.table("quizzes").select("category_id").eq("id", quiz_id).single().execute
        )
        if not quiz_resp.data:
            await callback_query.message.answer("‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        category_id = quiz_resp.data["category_id"]

        await asyncio.to_thread(
            supabase.table("results").delete().eq("quiz_id", quiz_id).execute
        )
        await asyncio.to_thread(
            supabase.table("quizzes").delete().eq("id", quiz_id).execute
        )

        remaining_resp = await asyncio.to_thread(
            supabase.table("quizzes").select("id").eq("category_id", category_id).execute
        )
        remaining = remaining_resp.data or []

        if not remaining:
            await asyncio.to_thread(
                supabase.table("categories").delete().eq("id", category_id).execute
            )
            await callback_query.message.answer("‚úÖ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∏ –µ—ë –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await callback_query.message.answer("‚úÖ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# 5. –û—Ç–º–µ–Ω–∞
@admin_router.callback_query(F.data == "cancel")
async def cancel_action(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)



