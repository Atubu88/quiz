import random
import uuid
import logging
import time  # <-- –¥–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç
from aiogram import Router, Bot, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from supabase import create_client, Client
from config import SUPABASE_URL, SUPABASE_API_KEY
from handlers.quiz_handler import start_quiz

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_API_KEY)

matching_quiz_router = Router()

ADMIN_ID = 732402669
#CHANNEL_ID = -1002392900552
CHANNEL_ID = -1002487599337
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–µ—Å—Å–∏–π –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã "–ù–∞–π–¥–∏ –ø–∞—Ä—É"
matching_sessions = {}

@matching_quiz_router.message(Command("send_matching_quiz_post"))
async def send_matching_quiz_post(message: types.Message, bot: Bot):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ –∫–∞–Ω–∞–ª."""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    response = supabase.table("matching_quizzes").select("id, title").execute()
    quizzes = response.data

    if not quizzes:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω.")
        return

    buttons = []
    for quiz in quizzes:
        quiz_id = quiz["id"]
        quiz_title = quiz["title"]
        buttons.append([
            InlineKeyboardButton(
                text=quiz_title,
                callback_data=f"select_matching_quiz_{quiz_id}"
            )
        ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:", reply_markup=keyboard)


@matching_quiz_router.callback_query(F.data.startswith("select_matching_quiz_"))
async def process_matching_quiz_selection(callback_query: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏), —á—Ç–æ–±—ã –≤—ã—Å–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤ –∫–∞–Ω–∞–ª."""
    quiz_id = int(callback_query.data.split("_")[-1])
    await callback_query.answer("‚úÖ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–∞–Ω–∞–ª...")

    bot_username = (await bot.me()).username

    quiz_resp = supabase.table("matching_quizzes").select("title, difficulty").eq("id", quiz_id).execute()
    if quiz_resp.data:
        quiz_title = quiz_resp.data[0]["title"]
        quiz_difficulty = quiz_resp.data[0].get("difficulty") or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    else:
        quiz_title = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        quiz_difficulty = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üß† –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                    url=f"https://t.me/{bot_username}?start=matching_quiz_{quiz_id}"
                )
            ]
        ]
    )

    text_for_channel = (
        "‚ùì –í —ç—Ç–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äì —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –∏–∑ –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–æ–∫, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞—Ä—É.\n\n"
        f"<b>üß† –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É –∏ –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!</b>\n\n"
        f"<b>üìå –ù–∞–∑–≤–∞–Ω–∏–µ:</b> ¬´{quiz_title}¬ª\n"
        f"<b>üî∞ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</b> {quiz_difficulty}\n\n"
        "‚¨áÔ∏è <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</b>"
    )

    await bot.send_message(
        chat_id=CHANNEL_ID,
        text=text_for_channel,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@matching_quiz_router.message(Command("start"))
async def handle_matching_quiz_start(message: types.Message, bot: Bot):
    """–°—Ç–∞—Ä—Ç –±–æ—Ç–∞. –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç /start matching_quiz_ID, –∑–∞–ø—É—Å–∫–∞–µ–º Matching Quiz."""
    args = message.text.split()
    if len(args) < 2:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –ù–∞–±–µ—Ä–∏—Ç–µ /send_matching_quiz_post (–µ—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω) "
            "–∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É."
        )
        return

    if args[1].startswith("matching_quiz_"):
        quiz_id_str = args[1].replace("matching_quiz_", "")
        if quiz_id_str.isdigit():
            quiz_id = int(quiz_id_str)
            logging.info(f"/start matching_quiz_{quiz_id} –æ—Ç {message.from_user.id}")
            await start_matching_quiz(message.chat.id, message.from_user.id, quiz_id, bot)
        else:
            await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç quiz_ID!")
    else:
        await message.answer("‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start!")


async def start_matching_quiz(chat_id: int, user_id: int, quiz_id: int, bot: Bot):
    """
    –ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –ø–æ–¥–±–æ—Ä–æ–º –ø–∞—Ä.
    –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –ë–î, —Å–ª—É—á–∞–π–Ω–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–æ–∫.
    """
    quiz_resp = supabase.table("matching_quizzes").select("pairs, title").eq("id", quiz_id).execute()
    if not quiz_resp.data:
        await bot.send_message(chat_id, "‚õî –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    pairs = quiz_resp.data[0]["pairs"]
    if not pairs or not isinstance(pairs, list):
        await bot.send_message(chat_id, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
        return

    left_buttons = {}
    right_buttons = {}
    correct_map = {}

    left_order = []
    right_order = []

    for pair in pairs:
        left_text = pair.get("left")
        right_text = pair.get("right")
        if not left_text or not right_text:
            continue
        left_id = str(uuid.uuid4())[:8]
        right_id = str(uuid.uuid4())[:8]
        left_buttons[left_id] = left_text
        right_buttons[right_id] = right_text
        correct_map[left_id] = right_id
        left_order.append(left_id)
        right_order.append(right_id)

    random.shuffle(left_order)
    random.shuffle(right_order)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ matching_sessions
    matching_sessions[user_id] = {
        "quiz_id": quiz_id,
        "left_buttons": left_buttons,
        "right_buttons": right_buttons,
        "left_order": left_order,
        "right_order": right_order,
        "correct_map": correct_map,
        "matched": set(),
        "current_selection": None,
        "error_count": 0,
        "start_time": time.time()  # <-- –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤—ã—á–∏—Å–ª–∏—Ç—å time_taken
    }

    keyboard = build_matching_keyboard(matching_sessions[user_id])
    await bot.send_message(
        chat_id=chat_id,
        text=(
            "üéØ –ù–∞—á–∏–Ω–∞–µ–º ¬´–ù–∞–π–¥–∏ –ø–∞—Ä—É¬ª!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º —Å–ø—Ä–∞–≤–∞; —Å–æ–≤–ø–∞–ª–æ ‚Äî —É–≤–∏–¥–∏—Ç–µ ‚úÖ.\n"
            "–í—Ä–µ–º—è –∏–¥—ë—Ç! –í —Ä–µ–π—Ç–∏–Ω–≥–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –±–µ–∑–æ—à–∏–±–æ—á–Ω–æ—Å—Ç–∏, –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ –æ—à–∏–±–æ–∫ ‚Äì –º–µ–Ω—å—à–µ–µ –≤—Ä–µ–º—è –≤—ã—à–µ.\n"
            "–ü—Ä–∏ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è."
        ),
        parse_mode="Markdown",
        reply_markup=keyboard
    )


def build_matching_keyboard(session: dict) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–æ–ª–æ–Ω–∫–∞–º–∏ (–ª–µ–≤–∞—è/–ø—Ä–∞–≤–∞—è) –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è."""
    keyboard_rows = []
    left_order = session["left_order"]
    right_order = session["right_order"]
    left_buttons = session["left_buttons"]
    right_buttons = session["right_buttons"]
    current = session["current_selection"]
    matched = session["matched"]

    max_rows = max(len(left_order), len(right_order))
    for i in range(max_rows):
        row = []
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        if i < len(left_order):
            left_id = left_order[i]
            text = left_buttons[left_id]
            if left_id in matched:
                display_text = f"‚úÖ {text}"
                cb_data = "already_matched"
            elif current and current["side"] == "left" and current["id"] == left_id:
                display_text = f"üîò {text}"
                cb_data = f"match_left_{left_id}"
            else:
                display_text = text
                cb_data = f"match_left_{left_id}"
            row.append(InlineKeyboardButton(text=display_text, callback_data=cb_data))

        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        if i < len(right_order):
            right_id = right_order[i]
            text = right_buttons[right_id]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–≥–∞–¥–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞
            found = any(right_id == session["correct_map"].get(lid) for lid in matched)
            if found:
                display_text = f"‚úÖ {text}"
                cb_data = "already_matched"
            elif current and current["side"] == "right" and current["id"] == right_id:
                display_text = f"üîò {text}"
                cb_data = f"match_right_{right_id}"
            else:
                display_text = text
                cb_data = f"match_right_{right_id}"
            row.append(InlineKeyboardButton(text=display_text, callback_data=cb_data))

        keyboard_rows.append(row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)


@matching_quiz_router.callback_query(F.data.startswith("match_left_") | F.data.startswith("match_right_"))
async def process_matching_choice(callback_query: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä)."""
    user_id = callback_query.from_user.id
    data = callback_query.data
    session = matching_sessions.get(user_id)

    if not session:
        await callback_query.answer("‚õî –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    if data == "already_matched":
        await callback_query.answer("‚ö†Ô∏è –≠—Ç–∞ –ø–∞—Ä–∞ —É–∂–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    if data.startswith("match_left_"):
        side = "left"
        button_id = data.replace("match_left_", "")
    elif data.startswith("match_right_"):
        side = "right"
        button_id = data.replace("match_right_", "")
    else:
        await callback_query.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!", show_alert=True)
        return

    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤—ã–±–æ—Ä–∞ - —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞
    if session["current_selection"] is None:
        session["current_selection"] = {"side": side, "id": button_id}
        keyboard = build_matching_keyboard(session)
        try:
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        await callback_query.answer()
        return

    # –ï—Å–ª–∏ –≤—ã–±–æ—Ä –∏–∑ —Ç–æ–π –∂–µ –∫–æ–ª–æ–Ω–∫–∏ - –º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä
    if session["current_selection"]["side"] == side:
        session["current_selection"] = {"side": side, "id": button_id}
        keyboard = build_matching_keyboard(session)
        try:
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        await callback_query.answer("–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!")
        return

    # –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (left_id vs right_id)
    first_selection = session["current_selection"]
    if first_selection["side"] == "left":
        left_id = first_selection["id"]
        right_id = button_id
    else:
        left_id = button_id
        right_id = first_selection["id"]

    correct_right = session["correct_map"].get(left_id)
    if correct_right == right_id:
        session["matched"].add(left_id)
        await callback_query.answer("‚úÖ –ü–∞—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞!")
    else:
        session["error_count"] = session.get("error_count", 0) + 1
        await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–∞—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

    session["current_selection"] = None
    keyboard = build_matching_keyboard(session)
    try:
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–∞—Ä—ã —É–≥–∞–¥–∞–Ω—ã
    total_pairs = len(session["correct_map"])
    if len(session["matched"]) == total_pairs:
        await finalize_matching_quiz(callback_query, bot, session)
        matching_sessions.pop(user_id, None)


import time
import logging
from aiogram import types, Bot


import time
import logging
from aiogram import types, Bot

async def finalize_matching_quiz(callback_query: types.CallbackQuery, bot: Bot, session: dict):
    user_id = callback_query.from_user.id
    quiz_id = session["quiz_id"]
    error_count = session.get("error_count", 0)

    # –£–∑–Ω–∞—ë–º –≤—Ä–µ–º—è
    end_time = time.time()
    time_taken = round(end_time - session["start_time"], 2)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegraph
    quiz_resp = supabase.table("matching_quizzes").select("title", "telegraph_url").eq("id", quiz_id).execute()

    if not quiz_resp.data:
        logging.error(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å ID {quiz_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ!")
        return

    quiz_data = quiz_resp.data[0]
    quiz_title = quiz_data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    telegraph_url = quiz_data.get("telegraph_url", "#")  # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É

    # -- –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (upsert) --
    supabase.table("matching_quiz_results").upsert({
        "user_id": user_id,
        "quiz_id": quiz_id,
        "is_correct": True,
        "error_count": error_count,
        "time_taken": time_taken
    }, on_conflict="user_id,quiz_id").execute()

    # -- –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ --
    results_for_quiz = supabase.table("matching_quiz_results") \
        .select("user_id, time_taken, error_count") \
        .eq("quiz_id", quiz_id) \
        .eq("is_correct", True) \
        .execute().data

    def ranking_key(rec):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ time_taken –∏–ª–∏ error_count –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
        - –ï—Å–ª–∏ time_taken –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—Ç–∞–≤–∏–º float('inf'), —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞.
        - –ï—Å–ª–∏ error_count –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—Ç–∞–≤–∏–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ 999999.
        """
        t = rec["time_taken"] if rec["time_taken"] is not None else float('inf')
        e = rec["error_count"] if rec["error_count"] is not None else 999999
        return (e, t)

    ranking = sorted(results_for_quiz, key=ranking_key)

    rank = next((i for i, row in enumerate(ranking, start=1) if row["user_id"] == user_id), None)
    total_players = len(ranking)

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Telegraph
    text = (
        f"üéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ¬´{quiz_title}¬ª!\n"
        f"üîπ –û—à–∏–±–æ–∫: {error_count}\n"
        f"‚è≥ –í—Ä–µ–º—è: {time_taken} —Å–µ–∫.\n\n"
        f"üèÜ <b>–í–∞—à–µ –º–µ—Å—Ç–æ:</b> <b>{rank}</b> –∏–∑ <b>{total_players}</b>\n\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if telegraph_url and telegraph_url != "#":
        text += f"üìÑ <a href='{telegraph_url}'>–ö–†–ê–¢–ö–ê–Ø –ò–ù–§–ê –ü–û –í–ò–ö–¢–û–†–ò–ù–ï</a>"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(
        chat_id=user_id,
        text=text,
        parse_mode="HTML",
        disable_web_page_preview=False
    )



