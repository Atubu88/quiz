import os
import logging
import asyncio
import gc
import psutil
import sentry_sdk
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)

logger = logging.getLogger(__name__)

SENTRY_DSN = os.getenv("SENTRY_DSN")

if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        send_default_pii=True,
        traces_sample_rate=1.0,
        ignore_errors=[KeyboardInterrupt]
    )
    logging.info("‚úÖ Sentry –ø–æ–¥–∫–ª—é—á—ë–Ω!")
else:
    logging.warning("‚ö†Ô∏è SENTRY_DSN –Ω–µ –Ω–∞–π–¥–µ–Ω! –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Sentry –æ—Ç–∫–ª—é—á–µ–Ω–æ.")

# ‚úÖ –°–æ–∑–¥–∞—ë–º `bot` –∏ `dp` –ì–õ–û–ë–ê–õ–¨–ù–û
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã

from handlers.start_handler import start_router
from handlers.prophets_quiz import prophets_quiz_router
from handlers.quiz_handler import quiz_router
from handlers.leaderboard_handler import leaderboard_router
from handlers.admin import admin_router
from deepseek_handler import deepseek_router
from handlers.competition_router import competition_router
from handlers.pair_matching_game import matching_quiz_router
from handlers.poll_quiz import poll_quiz_router
from handlers.survival import survival_router

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã

dp.include_router(start_router)
dp.include_router(matching_quiz_router)
dp.include_router(prophets_quiz_router)
dp.include_router(quiz_router)
dp.include_router(leaderboard_router)
dp.include_router(admin_router)
dp.include_router(deepseek_router)
dp.include_router(competition_router)
dp.include_router(poll_quiz_router)
dp.include_router(survival_router)

# üîπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
async def memory_cleanup():
    while True:
        process = psutil.Process()
        mem_usage = process.memory_info().rss / (1024 * 1024)

        if mem_usage > 150:
            gc.collect()
            logging.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {mem_usage:.2f} MB")

        await asyncio.sleep(600)

async def on_startup():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    sentry_sdk.capture_message("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

async def on_shutdown():
    global bot  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ `bot` –≥–ª–æ–±–∞–ª—å–Ω—ã–π
    logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await bot.session.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await asyncio.sleep(1)
    del bot  # –£–¥–∞–ª—è–µ–º `bot` –∏–∑ –ø–∞–º—è—Ç–∏
    gc.collect()

async def main():
    await on_startup()
    asyncio.create_task(memory_cleanup())

    # –£–¥–∞–ª—è–µ–º Webhook, –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
    await bot.delete_webhook(drop_pending_updates=True)

    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sentry_sdk.capture_exception(e)
    finally:
        await on_shutdown()


if __name__ == "__main__":
    asyncio.run(main())




