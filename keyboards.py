from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import os
from supabase import create_client

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Supabase (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_API_KEY = os.getenv("SUPABASE_API_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_API_KEY)


from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

def start_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω"), KeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")],
            [KeyboardButton(text="üåü –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥"), KeyboardButton(text="‚è≥ –í—ã–∂–∏–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="üåô –†–∞–º–∞–¥–∞–Ω-–ö–≤–µ—Å—Ç"), ]
        ],
        resize_keyboard=True
    )
    return keyboard



async def quiz_list_keyboard():
    response = await asyncio.to_thread(
        supabase.table("quizzes").select("id, title, is_active").order("id").execute
    )

    quizzes = response.data or []
    keyboard_builder = InlineKeyboardBuilder()

    for quiz in quizzes:
        title = quiz["title"]
        if not quiz["is_active"] and not title.startswith("üîí"):
            title = f"üîí {title}"  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç

        keyboard_builder.button(
            text=title,
            callback_data=f"quiz_{quiz['id']}"
        )

    keyboard_builder.adjust(1)  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
    return keyboard_builder.as_markup()


